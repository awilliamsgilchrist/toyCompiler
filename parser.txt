%{
#include <iostream>
extern in yylex();
%}

%union
{
	int numVal;
	char charVal;
	char* stringVal;
}

%token ARRAY
%token BEGIN
%token CHR
%token CONST
%token DO
%token DOWNTO
%token ELSE
%token ELSEIF
%token END
%token FOR
%token FORWARD
%token FUNCTION
%token IF
%token OF
%token ORD
%token PRED
%token PROCEDURE
%token READ
%token RECORD
%token REF
%token REPEAT
%token RETURN
%token STOP
%token SUCC
%token THEN
%token TO
%token TYPE
%token UNTIL
%token VAR
%token WHILE
%token WRITE
%token <stringVal> IDENTIFIER
%token ADD
%token SUB
%token MULT
%token DIV
%token AND
%token OR
%token TILDE
%token EQUAL
%token ANGLEBRACK
%token LESS
%token LESS_EQ
%token GREAT
%token GREAT_EQ
%token DOT
%token COMMA
%token COLON
%token SEMICOLON
%token OPEN_PAR
%token CLOSE_PAR
%token OPEN_SQR
%token CLOSE_SQR
%token ASSIGN
%token MOD

%token <numVal> NUM

%type <numVal> Expression
%type <numVal> ExpressionOne
%type <numVal> ExpressionTwo
%type <numVal> ExpressionThree
%type <numVal> ExpressionFour
%type <numVal> ExpressionFive
%type <numVal> ExpressionSix
%type <numVal> ExpressionSeven

%%

Program : OptCNull OptTNull OptVNull OptPFNull Block
	;

OptCNull : ConstantDecl
         | %empty
         ;

OptTNull : TypeDecl
         | %empty
         ;

OptVNull : VarDecl
         | %empty
         ;

OptPFNull : ProcedureDecl OptPFNull
          | FunctionDecl OptPFNull
          | %empty
          ;

ConstantDecl : CONST ConStatement
	     ;

ConStatement : IDENTIFIER EQUAL Expression SEMICOLON
	     | ConStatement ConStatement
	     ;

ProcedureDecl : PROCEDURE IDENTIFIER OPEN_PAR FormalParameters CLOSE_PAR SEMICOLON FORWARD SEMICOLON
	      | PROCEDURE IDENTIFIER OPEN_PAR FormalParameters CLOSE_PAR SEMICOLON Body SEMICOLON
	      ;

FunctionDecl : FUNCTION IDENTIFIER OPEN_PAR FormalParameters CLOSE_PAR COLON Type SEMICOLON FORWARD SEMICOLON
	     | FUNCTION IDENTIFIER OPEN_PAR FormalParameters CLOSE_PAR COLON Type SEMICOLON Body SEMICOLON
	     ;

FormalParameters : %empty
		 | OptVRNull IdentList COLON Type ForParStar
		 ;

ForParStar : SEMICOLON OptVRNull IdentList COLON Type ForParStar
	   | %empty
	   ;

OptVRNull : VAR
          | REF
          | %empty
          ;

Body : OptCNull OptTNull OptVNull Block
     ;

Block : BEGIN StatementSequence END
      ;

TypeDecl : TYPE TypDecPlus
         ;

TypDecPlus : IDENTIFIER EQUAL Type SEMICOLON
	   | TypDecPlus TypDecPlus
	   ;

Type : SimpleType
     | RecordType
     | ArrayType
     ;

SimpleType : IDENTIFIER
	   ;

RecordType : RECORD RecTypStar END
	   ;

RecTypStar : IdentList COLON Type SEMICOLON RecTypStar
	   | %empty
	   ;

ArrayType : ARRAY OPEN_SQR Expression COLON Expression CLOSE_SQR OF Type
	  ;

IdentList : IDENTIFIER IdeLisStar
	  ;

IdeLisStar : COMMA IDENTIFIER IdeLisStar
	   | %empty
	   ;

VarDecl : VAR VarDecStar
	;

VarDecStar : IdentList COLON Type SEMICOLON VarDecStar
	   | %empty
	   ;

StatementSequence : Statement StaSeqStar
		  ;

StaSeqStar : SEMICOLON Statement StaSeqStar
	   | %empty
	   ;

Statement : Assignment
	  | IfStatement
	  | WhileStatement
	  | RepeatStatement
	  | ForStatement
	  | StopStatement
	  | ReturnStatement
	  | ReadStatement
	  | WriteStatement
	  | ProcedureCall
	  | NullStatement
	  ;

Assignment : LValue ASSIGN Expression
	   ;

IfStatement : IF Expression THEN StatementSequence IfStaStar ELSE StatementSequence END
	    ;

IfStaStar : ELSEIF Expression THEN StatementSequence IfStaStar
	  | %empty
	  ;

WhileStatement : WHILE Expression DO StatementSequence END
	       ;

RepeatStatement : REPEAT Expression DO StatementSequence END
		;

ForStatement : FOR IDENTIFIER ASSIGN Expression TDOr Expression DO StatementSequence END
	     ;

TDOr : TO
     | DOWNTO
     ;

StopStatement : STOP
	      ;

ReturnStatement : RETURN OptENull
		;

OptENull : Expression
	 | %empty
	 ;

ReadStatement : READ OPEN_PAR LValue ReaStaStar CLOSE_PAR
	      ;

ReaStaStar : COMMA LValue ReaStaStar
	   | %empty
	   ;

WriteStatement : WRITE OPEN_PAR Expression WriStaStar CLOSE_PAR
	       ;

WriStaStar : COMMA Expression WriStaStar
	   | %empty
	   ;

ProcedureCall : IDENTIFIER OPEN_PAR OptPNull CLOSE_PAR
	      ;

OptPNull : Expression WriStaStar
	 | %empty
	 ;

NullStatement : %empty
	      ;

Expression : ExpressionOne
	   | CHR OPEN_PAR Expression CLOSE_PAR
	   | ORD OPEN_PAR Expression CLOSE_PAR
	   | PRED OPEN_PAR Expression CLOSE_PAR
	   | SUCC OPEN_PAR Expression CLOSE_PAR
	   | LValue
	   ;

ExpressionOne : ExpressionOne OR ExpressionOne {$$ = $1 || $3;}
	      | ExpressionTwo {$$ = $1;}
	      ;

ExpressionTwo : ExpressionTwo AND ExpressionTwo {$$ = $1 && $3;}
	      | ExpressionThree {$$ = $1};

ExpressionThree : TILDE ExpressionThree {$$ = !$2;}
	        | ExpressionFour {$$ = $1;}
		;

ExpressionFour : ExpressionFour EQUAL ExpressionFour {$$ = $1 == $3;}
	       | ExpressionFour ANGLEBRACK ExpressionFour {$$ = $1 != $3;}
	       | ExpressionFour LESS ExpressionFour {$$ = $1 < $3;}
	       | ExpressionFour LESS_EQ ExpressionFour {$$ = $1 <= $3;}
	       | ExpressionFour GREAT ExpressionFour {$$ = $1 > $3;}
	       | ExpressionFour GREAT_EQ ExpressionFour {$$ = $1 >= $3;}
	       | ExpressionFive {$$ = $1;}
	       ;

ExpressionFive : ExpressionFive ADD ExpressionFive {$$ = $1 + $3;}
	       | ExpressionFive SUB ExpressionFive {$$ = $1 - $3;}
	       | ExpressionSix {$$ = $1;}
	       ;

ExpressionSix : ExpressionSix MULT ExpressionSix {$$ = $1 * $3;}
	      | ExpressionSix DIV ExpressionSix {$$ = $1 / $3;}
	      | ExpressionSix MOD ExpressionSix {$$ = $1 % $3;}
	      | ExpressionSeven {$$ = $1;}
	      ;

ExpressionSeven : SUB NUM { $$ = $2 * -1;}
		| NUM { $$ = $1;}
		;

LValue : IDENTIFIER LValStar
       ;

LValStar : OptLVal LValStar
	 | %empty
	 ;

OptLVal : DOT IDENTIFIER
	| OPEN_SQR Expression CLOSE_SQR
	;
